I"%<h2 id="1381最大的团队表现值">1381.最大的团队表现值</h2>

<p>公司有编号为 1 到 n 的 n 个工程师，给你两个数组 speed 和 efficiency ，其中 speed[i] 和 efficiency[i] 分别代表第 i 位工程师的速度和效率。请你返回由最多 k 个工程师组成的 最大团队表现值 ，由于答案可能很大，请你返回结果对 10^9 + 7 取余后的结果。</p>

<p>团队表现值 的定义为：一个团队中「所有工程师速度的和」乘以他们「效率值中的最小值」。</p>

<p>示例 1：</p>

<p>输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2</p>

<p>输出：60</p>

<p>解释：</p>

<p>我们选择工程师 2（speed=10 且 efficiency=4）和工程师 5（speed=5 且 efficiency=7）。他们的团队表现值为 performance = (10 + 5) * min(4, 7) = 60 。</p>

<p>示例 2：
输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3</p>

<p>输出：68</p>

<p>解释：</p>

<p>此示例与第一个示例相同，除了 k = 3 。我们可以选择工程师 1 ，工程师 2 和工程师 5 得到最大的团队表现值。表现值为 performance = (2 + 10 + 5) * min(5, 4, 7) = 68 。</p>

<p>示例 3：</p>

<p>输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4</p>

<p>输出：72</p>

<p>1 &lt;= n &lt;= 10^5</p>

<p>speed.length == n</p>

<p>efficiency.length == n</p>

<p>1 &lt;= speed[i] &lt;= 10^5</p>

<p>1 &lt;= efficiency[i] &lt;= 10^8</p>

<p>1 &lt;= k &lt;= n</p>

<h3 id="解题思路">解题思路</h3>

<p>先按efficiency降序排序得到worker序列，再构建优先队列p，填入worker的前k个工程师。遍历worker，若新的工程师speed&gt;p.top()，有可能取代。若speed&lt;=p.top()， 因降序排序，不可能取代。</p>

<h3 id="代码">代码：</h3>

<pre><code class="language-c++">class Solution {
public:
    int maxPerformance(int n, vector&lt;int&gt;&amp; speed, vector&lt;int&gt;&amp; efficiency, int k) {
        vector&lt;pair&lt;int,int&gt;&gt; worker(n);
        for(int i = 0; i &lt; n; i++)
            worker[i] = make_pair(efficiency[i], speed[i]);
        sort(worker.begin(), worker.end(),[](auto&amp; a, auto&amp; b){return a.first &gt; b.first;});
        long sum = 0,res = 0;
        priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; p;
        for(int i = 0; i &lt; k; i++)
        {
            p.push(worker[i].second);
            sum += worker[i].second;
            res = max(worker[i].first*sum,res);
        }
        for(int i = k;i &lt; n;i++)
        {
            if(worker[i].second &gt; p.top())
            {
                sum -= p.top();
                sum += worker[i].second;
                p.pop();
                p.push(worker[i].second);
            }
            res = max(worker[i].first*sum,res);
        }
        return res%(1000000000+7);
    }
};
</code></pre>

<h3 id="收获">收获</h3>

<p>复习了sort匿名函数</p>

<p>复习了优先队列</p>

<p>由于1 &lt;= speed[i] &lt;= 10^5，1 &lt;= efficiency[i] &lt;= 10^8 ，使用int报错</p>

:ET