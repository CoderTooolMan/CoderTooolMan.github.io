I"^<h2 id="1247-交换字符使得字符串相同">1247. 交换字符使得字符串相同</h2>

<p>有两个长度相同的字符串 s1 和 s2，且它们其中 只含有 字符 “x” 和 “y”，你需要通过「交换字符」的方式使这两个字符串相同。</p>

<p>每次「交换字符」的时候，你都可以在两个字符串中各选一个字符进行交换。</p>

<p>交换只能发生在两个不同的字符串之间，绝对不能发生在同一个字符串内部。也就是说，我们可以交换 s1[i] 和 s2[j]，但不能交换 s1[i] 和 s1[j]。</p>

<p>最后，请你返回使 s1 和 s2 相同的最小交换次数，如果没有方法能够使得这两个字符串相同，则返回 -1 。</p>

<p>示例 1：</p>

<p>输入：s1 = “xx”, s2 = “yy”</p>

<p>输出：1</p>

<p>解释：</p>

<p>交换 s1[0] 和 s2[1]，得到 s1 = “yx”，s2 = “yx”。</p>

<p>示例 2：</p>

<p>输入：s1 = “xy”, s2 = “yx”</p>

<p>输出：2</p>

<p>解释：</p>

<p>交换 s1[0] 和 s2[0]，得到 s1 = “yy”，s2 = “xx” 。</p>

<p>交换 s1[0] 和 s2[1]，得到 s1 = “xy”，s2 = “xy” 。</p>

<p>注意，你不能交换 s1[0] 和 s1[1] 使得 s1 变成 “yx”，因为我们只能交换属于两个不同字符串的字符。</p>

<p>示例 3：</p>

<p>输入：s1 = “xx”, s2 = “xy”</p>

<p>输出：-1</p>

<p>示例 4：</p>

<p>输入：s1 = “xxyyxyxyxx”, s2 = “xyyxyxxxyx”</p>

<p>输出：4</p>

<p>提示：</p>

<p>1 &lt;= s1.length, s2.length &lt;= 1000</p>

<p>s1, s2 只包含 ‘x’ 或 ‘y’。</p>

<h3 id="思路">思路</h3>

<p>“xx”“yy”情况只要换一次，优先考虑。统计s1[i]≠s2[i]时，x、y出现次数c1、c2，偶数表示xx(yy)，换一次。c1%2 = c2%2 = 1表示xy(yx)，交换一次。(c1+c2)%2 == 1则不成功。</p>

<h3 id="代码">代码</h3>

<pre><code class="language-c++">class Solution {
public:
    int minimumSwap(string s1, string s2) {
        int c1 = 0,c2 = 0;
        for(int i=0;i&lt;s1.size();i++){
            if(s1[i] != s2[i]){
                if(s1[i] == 'x') 
                    c1++;
                else
                    c2++;
            }
        }
        if((c1+c2)%2) 
            return -1;
        return c1/2+c2/2+2*(c1%2);
    }
};
</code></pre>

<h3 id="收获">收获</h3>

<p>最初的想法是遍历s1、s2，若s1[i] ≠ s2[i]，寻找下一个不等的元素，分成”xx”“yy”换一次和“xy”“yx”换两次计算。若超过字符串长度且找不到第二个字母，则不成功。</p>

<p>比如</p>

<pre><code>s1 = "xxyyxyxyxx";
s2 = "xyyxyxxxyx"；
</code></pre>

<p>按原思路，交换出现在1、3位，4、5位，7、8位，次数为6。但最少次数为4（交换1、4位，3、5位，7、8位）。即只交换相邻两个不同元素，没有考虑全局下”xx”“yy”型交换次数更少。</p>
:ET